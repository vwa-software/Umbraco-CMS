@inherits AmaziliaTemplatePage<ContentModels.Variant>
@using Amazilia.Web.Mvc;
@using Amazilia.Web.Extentions;
@using ContentModels = Umbraco.Web.PublishedContentModels;
@{
    Layout = "Master.cshtml";

    var product = ProductService.GetProductByContent(Model.Content);

    var variant = product;

    //todo, get the correct variant
    if (product.ProductType == Amazilia.Core.Domain.Catalog.ProductType.GroupedProduct && Model.Content.Children().Count() > 0)
    {
        variant = ProductService.GetProductByContent(Model.Content.FirstChild());
    }

    //todo, get the correct variant
    if (product.ProductType == Amazilia.Core.Domain.Catalog.ProductType.Variant)
    {
        product = ProductService.GetProductByContent(variant.UmbracoContent.Parent);
    }

    bool showPriceInclTax = true;
}
<!-- for the section we want to show the shop header -->
@Html.Partial("~/Views/Partials/SectionHeader.cshtml", Model.Content.Parent.Parent)

<section class="section">
    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="product-image-container">
                    <img class="product-image" src="@(Model.Content.Parent.GetPropertyValue<IEnumerable<Umbraco.Core.Models.IPublishedContent>>("Photos").FirstOrDefault().Url)" />
                </div>
            </div>
            <div class="col-md-6">
                <h1>@(Model.Content.Parent.GetPropertyValue<string>("ProductName"))</h1>

                @if (variant.HasFromToPrice)
                {
                    @variant.FormatedFromToPrice(showPriceInclTax)
                }
                else
                {
                    @variant.FormatedPrice(showPriceInclTax, 1)
                }


                @if (variant.TierPrices != null && variant.TierPrices.Where(a => a.Quantity > 1).Count() > 0)
                {
                    @Html.Partial("Amazilia/Product/TierPrices", variant)
                }

                @if (product.ProductType == Amazilia.Core.Domain.Catalog.ProductType.GroupedProduct)
                {
                    <h4>Properties</h4>
                    <p>
                        Size : @(variant.UmbracoContent.GetPropertyValue<string>("size"))<br />
                        Color : @(variant.UmbracoContent.GetPropertyValue<string>("color"))<br />
                    </p>

                    @Html.Partial("Amazilia/Product/VariantChoice", product)
                }

                <div class="product-teaser">@(Model.Content.GetPropertyValue<string>("Description"))</div>
                @Html.Partial("Amazilia/Basket/AddToBasketForm", variant)

                <div class="product-advantages">
                    @if (Model.Content.GetPropertyValue("Features") != null)
                    {
                        foreach (var feature in Model.Content.GetPropertyValue<IEnumerable<Umbraco.Core.Models.IPublishedContent>>("Features"))
                        {
                            <div class="product-advantage">
                                <h4>@feature.GetPropertyValue("featureName")</h4>
                                <h5>@feature.GetPropertyValue("featureDetails")</h5>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</section>
<section class="section section--sand">
    <div class="container">
        <!-- todo: Check if grid is empty via a property value converter -->
        @Html.GetGridHtml(Model.Content.Parent, "bodyText", "bootstrap3-fluid")
    </div>
</section>

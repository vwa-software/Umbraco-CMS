@inherits UmbracoViewPage<ShoppingCartModel>
@using Amazilia.Web.Models.ShoppingCart
@using Amazilia.Web.Controllers
@using Amazilia.Web.Extentions;

@*@if (!Model.OnePageCheckoutEnabled)
    {
        @Html.Action("CheckoutProgress", "Checkout", new { step = CheckoutProgressStep.Cart })
    }*@

<div class="order-summary-content">
    @if (Model.Items.Count > 0)
    {
        if (Model.Warnings.Count > 0)
        {
            <div class="message-error">
                <ul>
                    @foreach (var warning in Model.Warnings)
                    {
                        <li>@warning</li>
                    }
                </ul>
            </div>
        }
        @*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@
        //using (Html.BeginRouteForm("ShoppingCart", FormMethod.Post, new { enctype = "multipart/form-data", id = "shopping-cart-form" }))
        //{
        using (Html.BeginUmbracoForm<CheckoutController>("CartSubmit", new { area = "Amazilia" }))
        {
            @Html.AntiForgeryToken()
            <div class="table-wrapper">
                <table class="cart table">
                    <colgroup>
                        @if (Model.IsEditable)
                        {
                            <col width="1" />
                        }
                      
                        <col />
                        <col width="1" />
                        <col width="1" />
                        <col width="1" />
                    </colgroup>
                    <thead>
                        <tr>
                            @if (Model.IsEditable)
                            {
                                <th class="remove-from-cart">
                                    @Umbraco.GetDictionaryValue("ShoppingCart.Remove", "Remove")
                                </th>
                            }
                           
                            <th class="product">
                                @Umbraco.GetDictionaryValue("ShoppingCart.Product(s)", "Products")
                            </th>
                            <th class="unit-price">
                                @Umbraco.GetDictionaryValue("ShoppingCart.UnitPrice", "Price")
                            </th>
                            <th class="quantity">
                                @Umbraco.GetDictionaryValue("ShoppingCart.Quantity", "Quantity")
                            </th>
                            <th class="subtotal">
                                @Umbraco.GetDictionaryValue("ShoppingCart.ItemTotal", "Total")
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Items)
                        {
                            <tr>
                                @if (Model.IsEditable)
                                {
                                    <td class="remove-from-cart">
                                       
                                            <label class="td-title">@Umbraco.GetDictionaryValue("ShoppingCart.Remove", "Remove"):</label>
                                            <input type="checkbox" name="removefromcart" value="@(item.Id)" />
                                       
                                    </td>
                                }
                               
                                    <td class="product">
                                        <label class="td-title">@Umbraco.GetDictionaryValue("ShoppingCart.Product(s)", "Products"):</label><br/>
                                        <a href="@item.Product.UmbracoContent.Name" class="product-name">@item.Product.UmbracoContent.Name</a>
                                       
                                        @if (item.Warnings.Count > 0)
                                        {
                                            <div class="message-error">
                                                <ul>
                                                    @foreach (var warning in item.Warnings)
                                                    {
                                                        <li>@warning</li>
                                                    }
                                                </ul>
                                            </div>
                                        }
                                    </td>
                                <td class="unit-price">
                                    <label class="td-title">@Umbraco.GetDictionaryValue("ShoppingCart.UnitPrice", "Unit Price"):</label>
                                    <span class="product-unit-price text-nowrap">@item.UnitPrice.FormatPriceInclTax()</span>
                                </td>
                                <td class="quantity">
                                    <label class="td-title">@Umbraco.GetDictionaryValue("ShoppingCart.Quantity", "Quantity"):</label>
                                    @if (Model.IsEditable)
                                    {
                                        if (item.AllowedQuantities.Count > 0)
                                        {
                                            <select name="itemquantity@(item.Id)" class="qty-dropdown">
                                                @foreach (var qty in item.AllowedQuantities)
                                                {
                                                    <option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                                                }
                                            </select>
                                        }
                                        else
                                        {
                                            <input name="itemquantity@(item.Id)" @(item.Product.ManageInventory ? "max=" + item.Product.StockQuantity.ToString() : "") type="number" value="@(item.Quantity)" class="qty-input" />
                                        }

                                    }
                                    else
                                    {
                                        <span class="product-quantity">@item.Quantity</span>
                                    }
                                </td>
                                <td class="subtotal">
                                    <label class="td-title">@Umbraco.GetDictionaryValue("ShoppingCart.ItemTotal", "ItemTotal"):</label>
                                    <span class="product-subtotal">@item.SubTotal.FormatPriceInclTax()</span>
                                    @*@if (!String.IsNullOrEmpty(item.Discount))
                                        {
                                            <div class="discount">
                                                @Umbraco.GetDictionaryValue("ShoppingCart.ItemYouSave", item.Discount)
                                            </div>
                                            if (item.MaximumDiscountedQty.HasValue)
                                            {
                                                <div class="discount-additional-info">
                                                    @Umbraco.GetDictionaryValue("ShoppingCart.MaximumDiscountedQty", item.MaximumDiscountedQty.Value)
                                                </div>
                                            }
                                        }*@
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            @*
                    if (Model.IsEditable && Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
                    {
                        var inclTax = true;// todo EngineContext.Current.Resolve<IWorkContext>().TaxDisplayType == TaxDisplayType.IncludingTax;
                        //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                        //of course, you can modify appropriate locales to include VAT info there
                            <div class="tax-shipping-info">
                                @Umbraco.GetDictionaryValue(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                            </div>
                        }
                        <div class="cart-options">
                            @if (Model.IsEditable)
                            {
                                <div class="common-buttons">
                                    <input type="submit" name="updatecart" value="@Umbraco.GetDictionaryValue("ShoppingCart.UpdateCart")" class="button-2 update-cart-button" />
                                    <input type="submit" name="continueshopping" value="@Umbraco.GetDictionaryValue("ShoppingCart.ContinueShopping")" class="button-2 continue-shopping-button" />
                                </div>
                            }
                            @if (Model.IsEditable)
                            {
                                @Html.Partial("_CheckoutAttributes", Model.CheckoutAttributes, new ViewDataDictionary())
                            }
                            @if (!String.IsNullOrEmpty(Model.CheckoutAttributeInfo))
                            {
                                <div class="selected-checkout-attributes">
                                    @Html.Raw(Model.CheckoutAttributeInfo)
                                </div>
                            }
                        </div>
                        <div class="cart-footer">

                           @if (Model.IsEditable)
                    {
                        <div class="cart-collaterals">
                            <div class="deals">
                                @Html.Partial("_DiscountBox", Model.DiscountBox)
                                @Html.Partial("_GiftCardBox", Model.GiftCardBox)
                                @Html.Widget("order_summary_content_deals")
                            </div>
                            @Html.Partial("EstimateShipping", Model.EstimateShipping)
                        </div>
                    }
                    <div class="totals">
                        @Html.Action("OrderTotals", "ShoppingCart", new { isEditable = Model.IsEditable })
                        @if (Model.IsEditable)
                        {
                            if (!String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                            {
                                <div class="min-amount-warning">
                                    @Model.MinOrderSubtotalWarning
                                </div>
                            }
                        }
                        @if (Model.IsEditable)
                        {
                            if (Model.TermsOfServiceOnShoppingCartPage)
                            {
                                <div id="terms-of-service-warning-box" title="@Umbraco.GetDictionaryValue("Checkout.TermsOfService")" style="display: none;">
                                    <p>@Umbraco.GetDictionaryValue("Checkout.TermsOfService.PleaseAccept")</p>
                                </div>
                                <div class="terms-of-service">
                                    <input id="termsofservice" type="checkbox" name="termsofservice" />
                                    <label for="termsofservice">@Umbraco.GetDictionaryValue("Checkout.TermsOfService.IAccept")</label>
                                    <a class="read" id="read-terms">@Umbraco.GetDictionaryValue("Checkout.TermsOfService.Read")</a>
                                    <script>
                                   $(document).ready(function() {
                                       $('#read-terms').on('click', function(e) {
                                           e.preventDefault();
                                           displayPopupContentFromUrl('@Url.RouteUrl("TopicPopup", new {SystemName = "conditionsofuse"})', '@Umbraco.GetDictionaryValue("Checkout.TermsOfService")');
                                       });
                                   });
                                    </script>
                                </div>
                            }
                            <div class="checkout-buttons">
                                @if (String.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && !Model.HideCheckoutButton)
                                {
                                    <script type="text/javascript">
                                        $(document).ready(function () {
                                            $('#checkout').click(function () {
                                                //terms of service
                                                var termOfServiceOk = true;
                                                if ($('#termsofservice').length > 0) {
                                                    //terms of service element exists
                                                    if (!$('#termsofservice').is(':checked')) {
                                                        $("#terms-of-service-warning-box").dialog();
                                                        termOfServiceOk = false;
                                                    } else {
                                                        termOfServiceOk = true;
                                                    }
                                                }
                                                return termOfServiceOk;
                                            });
                                        });
                                    </script>
                                    <button type="submit" id="checkout" name="checkout" value="checkout" class="button-1 checkout-button">
                                        @Umbraco.GetDictionaryValue("Checkout.Button")
                                    </button>
                                }
                            </div>
                            <div class="addon-buttons">

                                @Html.Partial("_ButtonPaymentMethod", Model)
                            </div>
                        }

                        </div>
                    </div>

                     if (Model.IsEditable)
                {
                    @Html.Action("CrossSellProducts", "Product")
                }

            *@

            <div class="buttons">
                <input type="submit" name="updatecart" value="Update Cart" class="btn btn-success" />
                <input type="submit" name="nextstep" value="Next" class="btn btn-success" />
            </div>



        }

    }
    else
    {
        <div class="no-data">
            Shopping cart is empty
        </div>
    }

</div>
